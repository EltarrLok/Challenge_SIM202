V1(-1,3.2,-2,8)
V1=c(-1,3.2,-2,8)
V2=c(-2,-1,0,1,2,3,4,5,6)
V3=(0.05,0.1,0.15,0.2)
V3=c(0.05,0.1,0.15,0.2)
V4=c(1,1,1,1,1,1,1,1,1,1)
V5=c(OUI,NON)
V5=c('OUI'','NON'')
V5=c('OUI','NON')
V5
sort(V1)
V1
1+2
1+2.0
1.0+3.0
V2
V3
Vinty=c(1,1.0,2.0,2)
Vinty
V6=2*V1-3
V6
V6=2*V2-3
V6
V3+V2
cos(0)
log(1)
log(V1)
V5+1
log(V3)
V5(1)
V5[1]
V5[2]
length(6)
length(V6)
length(V1)
10:(-1)
seg(1,20,by=0,8)
seq(1,20,by=0,8)
seq(1,20,by=0.8)
seq(1,20,length=13)
V6[c(6,1,9)]
V6
V6[c(length(V6):)]
V6[c(length(V6)-3:)]
V6[c(length(V6)-3):]
c(length(V6)-3):
4
V1[1,4]
V1[1]
V6[c(length(V6)-2, c(length(V6)-1, c(length(V6)]
cumsum(V6)
V6
mean(V6)*length(V6)
sum(V6)
length(V2[V2>0])
?choose
n=10;p=0.2
k= 0:10     # ? compl?ter
pk= choose(n,k)*p^k*(1-p)^(n-k)
pk
k
mean(pk)
var(pk)
esperance_attendu = n*p
esperance_attendu
esperance = mean(pk)
esperance
var_attendu = n*p*(1-p)
var_obt = var(pk)
var_obt
var_attendu
Pk=cumsu(pk)
Pk=cumsum(pk)
Pk
df= data.frame(k,proba=pk)
print(df)
df$proba
df["proba"]
df[1:4,2]
df$proba[1:4]
max(df$proba)
summary(df)
attach(df) # acc?s direct aux colonnes, mais attention !!
detach(df)
?summary
?ppois
?pois
pwd
getwd()
setw(dir ="Dossier Personnel")
ls
N=3;
require(bbmle)
cauchy1(scale.arg = 1, llocation = "identitylink", ilocation = NULL,
imethod = 1, gprobs.y = ppoints(19), zero = NULL)
help
View(df)
V1=c(-1,3.2,-2,8)
V2=-2:6
V3=seq(0.05,0.2,0.05)
V4=rep(1,10)
V5=c("OUI","NON")
sort(V1)
# op?ration composante par composante et recyclage
V6=2*V2-3
V6=2*V2-3
V1=c(-1,3.2,-2,8)
V2=-2:6
V3=seq(0.05,0.2,0.05)
V4=rep(1,10)
V5=c("OUI","NON")
sort(V1)
# op?ration composante par composante et recyclage
V6=2*V2-3
V6
V3+V2
log(V3)
log(v6)
log(V6)
V5+1
V5[2]
V7=V6[length(V6)-3:length(V6)]
V7
v7=tail(V6,3) #plus simple !
v7
v7=V6[length(V6)-(2:0)]
v7=V6[length(V6)-(2:0)]
v7
###############################################
### graphiques
##############################################
demo(graphics)
sortie
###############################################
### graphiques
##############################################
demo(graphics)
sum(0.5*reshist$density)  #1
curve(dnorm(x,m,sd=sd),col="red",add=TRUE)  # superpose la gaussienne
###############################################
### graphiques
##############################################
demo(graphics)
# les points moustache ne vaut que jusqu'aux observations
# distantes des 1er (ou 3?me, cas ici) quartile
# de plus de 1.5 x distance interquartile
# s?rie tr?s dissym?trique, ? cause d'un point aberrant
points(1,mean(chem),col="red",pch=8,cex=1.5)
summary(chem)
###############################################
### graphiques
##############################################
demo(graphics)
par(mfrow=c(1,1),oma=rep(0,4))
plot(Wt) # ile poids en fonction du num?ro d'observation
hist(Wt)                 # en nombre, l'aire somme ? n
### quantitative
par(mfrow=c(1,1),oma=rep(0,4))
###############################################
### graphiques
##############################################
demo(graphics)
plot(cabbages$VitC,Wt,col=cabbages$Cult,pch=as.numeric(cabbages$Cult))
title("poids fonction de \n Vitc et Cult",cex=.5)
### qualitative
# attach(cabbages)
Wt=cabbages$HeadWt
### qualitative
attach(cabbages)
### qualitative
attach(cabbages)
source('~/Documents/ENSTA/STA201/STA201-TP1-Intro-2018-corr.R', echo=TRUE)
### qualitative
attach(cabbages)
rm(list=objects()) ; graphics.off()
help(mean)
?mean
??mean
apropos("mean")
n=10; p=0.2
k=0:n
library(MASS)
?cabbages
### qualitative
attach(cabbages)
Wt=cabbages$HeadWt
detach(df) # suppression de l'acc?s direct
detach(cabbages)
Wt=cabbages$HeadWt
### qualitative
attach(cabbages)
Wt=cabbages$HeadWt
Wt=cabbages$HeadWt
### qualitative
attach(cabbages)
detach(cabbages)
Wt=cabbages$HeadWt
### qualitative
attach(cabbages)
Wt=cabbages$HeadWt
par(mfrow=c(1,2),   # d?finit le d?coupage de la fen?tre
oma=c(0,0,3,0)) # d?finit les marges externes
barplot(table(Date),main="diagramme en barres",
col=rainbow(3))
barplot(table(Date),main="diagramme en barres",
col=rainbow(4))
barplot(table(Date),main="diagramme en barres",
col=rainbow(2))
barplot(table(Date),main="diagramme en barres",
col=rainbow(4))
barplot(table(Date),main="diagramme en barres",
col=rainbow(0))
barplot(table(Date),main="diagramme en barres",
col=rainbow(1))
barplot(table(Date),main="diagramme en barres",
col=rainbow(2))
barplot(table(Date),main="diagramme en barres",
col=rainbow(3))
barplot(table(Date),main="diagramme en barres",
col=rainbow(4))
barplot(table(Date),main="diagramme en barres",
col=rainbow(4))
plot(cabbages$VitC,Wt,col=cabbages$Cult,pch=as.numeric(cabbages$Cult))
barplot(table(Date),main="diagramme en barres",
col=rainbow(4))
barplot(table(Date),main="diagramme en barres",
col=rainbow(8))
barplot(table(Date),main="diagramme en barres",
col=rainbow(8))
barplot(table(Date),main="diagramme en barres",
col=rainbow(8))
barplot(table(Date),main="diagramme en barres",
col=rainbow(3))
barplot(table(Date),main="diagramme en barres",
col=rainbow(3))
plot(cabbages$VitC,Wt,col=cabbages$Cult,pch=as.numeric(cabbages$Cult))
title("poids fonction de \n Vitc et Cult",cex=.5)
legend("topright",levels(cabbages$Cult),col=1:2,pch=1:2)
plot(cabbages$VitC,Wt,col=cabbages$Cult,pch=as.numeric(cabbages$Cult))
legend("topright",levels(cabbages$Cult),col=1:2,pch=1:2)
legend("topleft",levels(cabbages$Cult),col=1:2,pch=1:2)
legend("botleft",levels(cabbages$Cult),col=1:2,pch=1:2)
legend("botomleft",levels(cabbages$Cult),col=1:2,pch=1:2)
legend("bottomleft",levels(cabbages$Cult),col=1:2,pch=1:2)
legend("left",levels(cabbages$Cult),col=1:2,pch=1:2)
legend("right",levels(cabbages$Cult),col=1:2,pch=1:2)
legend("bottomright",levels(cabbages$Cult),col=1:2,pch=1:2)
legend("topright",levels(cabbages$Cult),col=1:2,pch=1:2)
plot(cabbages$VitC,Wt,col=cabbages$Cult,pch=as.numeric(cabbages$Cult))
title("poids fonction de \n Vitc et Cult",cex=.5)
title(main="Quelques graphes",   outer=TRUE)
dev.off()  # pour fermer le fichier pdf
hist(cabbages$HeadWt)
curve()
eps<-gaus(0,1)
eps<-gauss(0,1)
### quantitative
par(mfrow=c(1,1),oma=rep(0,4))
plot(Wt) # ile poids en fonction du num?ro d'observation
hist(Wt)                 # en nombre, l'aire somme ? n
hist(Wt, proba=TRUE)     # en proportion, l'aire somme ? 1
hist(Wt)                 # en nombre, l'aire somme ? n
hist(Wt, proba=TRUE)     # en proportion, l'aire somme ? 1
# on v?rifie que l'aire vaut 1
m=mean(Wt) ; sd=sd(Wt)
reshist=hist(Wt,col="grey",prob=TRUE,ylim=c(0,0.5),xlim=c(1,5),
main=paste("moy= ",round(m,2),"sd= ",round(sd,2) ))
sum(0.5*reshist$density)  #1
curve(dnorm(x,m,sd=sd),col="red",add=TRUE)  # superpose la gaussienne
boxplot(Wt)
# bo?te ? moustache
# repr?sente les 1er, 2?me (m?diane), 3?me quartile
# sur l'exemple, les moustaches atteignent le min et le max
par(mfrow=c(1,1))
boxplot(Wt)
install.packages("caTools")
install.packages(c("digest", "caTools", "bitops"))
install.packages("rprojroot")
update.packages("caTools")
update.packages("rmarkdown")
itle(main = "January Pie Sales", cex.main = 1.8, font.main = 1)
# title(xlab = "(Don't try this at home kids)", cex.lab = 0.8, font.lab = 3)
> ## Boxplots:  I couldn't resist the capability for filling the "box".
> ## The use of color seems like a useful addition, it focuses attention
> ## on the central bulk of the data.
>
> par(bg="cornsilk")
> n <- 10
> g <- gl(n, 100, n*100)
> x <- rnorm(n*100) + sqrt(as.numeric(g))
> boxplot(split(x,g), col="lavender", notch=TRUE)
title(main = "January Pie Sales", cex.main = 1.8, font.main = 1)
# title(xlab = "(Don't try this at home kids)", cex.lab = 0.8, font.lab = 3)
## Boxplots:  I couldn't resist the capability for filling the "box".
## The use of color seems like a useful addition, it focuses attention
## on the central bulk of the data.
par(bg="cornsilk")
n <- 10
g <- gl(n, 100, n*100)
x <- rnorm(n*100) + sqrt(as.numeric(g))
boxplot(split(x,g), col="lavender", notch=TRUE)
title(main = "January Pie Sales", cex.main = 1.8, font.main = 1)
# title(xlab = "(Don't try this at home kids)", cex.lab = 0.8, font.lab = 3)
## Boxplots:  I couldn't resist the capability for filling the "box".
## The use of color seems like a useful addition, it focuses attention
## on the central bulk of the data.
par(bg="cornsilk")
n <- 10
g <- gl(n, 100, n*100)
x <- rnorm(n*100) + sqrt(as.numeric(g))
boxplot(split(x,g), col="lavender", notch=TRUE)
title(main = "January Pie Sales", cex.main = 1.8, font.main = 1)
# title(xlab = "(Don't try this at home kids)", cex.lab = 0.8, font.lab = 3)
## Boxplots:  I couldn't resist the capability for filling the "box".
## The use of color seems like a useful addition, it focuses attention
## on the central bulk of the data.
par(bg="cornsilk")
n <- 10
g <- gl(n, 100, n*100)
x <- rnorm(n*100) + sqrt(as.numeric(g))
boxplot(split(x,g), col="lavender", notch=TRUE)
title(main = "January Pie Sales", cex.main = 1.8, font.main = 1)
# title(xlab = "(Don't try this at home kids)", cex.lab = 0.8, font.lab = 3)
## Boxplots:  I couldn't resist the capability for filling the "box".
## The use of color seems like a useful addition, it focuses attention
## on the central bulk of the data.
par(bg="cornsilk")
n <- 10
g <- gl(n, 100, n*100)
x <- rnorm(n*100) + sqrt(as.numeric(g))
boxplot(split(x,g), col="lavender", notch=TRUE)
title(main = "January Pie Sales", cex.main = 1.8, font.main = 1)
# title(xlab = "(Don't try this at home kids)", cex.lab = 0.8, font.lab = 3)
## Boxplots:  I couldn't resist the capability for filling the "box".
## The use of color seems like a useful addition, it focuses attention
## on the central bulk of the data.
par(bg="cornsilk")
n <- 10
g <- gl(n, 100, n*100)
x <- rnorm(n*100) + sqrt(as.numeric(g))
boxplot(split(x,g), col="lavender", notch=TRUE)
title(main = "January Pie Sales", cex.main = 1.8, font.main = 1)
# title(xlab = "(Don't try this at home kids)", cex.lab = 0.8, font.lab = 3)
## Boxplots:  I couldn't resist the capability for filling the "box".
## The use of color seems like a useful addition, it focuses attention
## on the central bulk of the data.
par(bg="cornsilk")
n <- 10
g <- gl(n, 100, n*100)
x <- rnorm(n*100) + sqrt(as.numeric(g))
boxplot(split(x,g), col="lavender", notch=TRUE)
title(main = "January Pie Sales", cex.main = 1.8, font.main = 1)
# title(xlab = "(Don't try this at home kids)", cex.lab = 0.8, font.lab = 3)
## Boxplots:  I couldn't resist the capability for filling the "box".
## The use of color seems like a useful addition, it focuses attention
## on the central bulk of the data.
par(bg="cornsilk")
n <- 10
g <- gl(n, 100, n*100)
x <- rnorm(n*100) + sqrt(as.numeric(g))
boxplot(split(x,g), col="lavender", notch=TRUE)
title(main = "January Pie Sales", cex.main = 1.8, font.main = 1)
# title(xlab = "(Don't try this at home kids)", cex.lab = 0.8, font.lab = 3)
## Boxplots:  I couldn't resist the capability for filling the "box".
## The use of color seems like a useful addition, it focuses attention
## on the central bulk of the data.
par(bg="cornsilk")
n <- 10
g <- gl(n, 100, n*100)
x <- rnorm(n*100) + sqrt(as.numeric(g))
boxplot(split(x,g), col="lavender", notch=TRUE)
title(main = "A Sample Color Wheel", cex.main = 1.4, font.main = 3)
title(xlab = "(Use this as a test of monitor linearity)",
+       cex.lab = 0.8, font.lab = 3)
## We have already confessed to having these.  This is just showing off X11
## color names (and the example (from the postscript manual) is pretty "cute".
pie.sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)
names(pie.sales) <- c("Blueberry", "Cherry",
+ 		      "Apple", "Boston Cream", "Other", "Vanilla Cream")
pie(pie.sales,
+     col = c("purple","violetred1","green3","cornsilk","cyan","white"))
title(main = "A Sample Color Wheel", cex.main = 1.4, font.main = 3)
title(xlab = "(Use this as a test of monitor linearity)",
+       cex.lab = 0.8, font.lab = 3)
## We have already confessed to having these.  This is just showing off X11
## color names (and the example (from the postscript manual) is pretty "cute".
pie.sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)
names(pie.sales) <- c("Blueberry", "Cherry",
+ 		      "Apple", "Boston Cream", "Other", "Vanilla Cream")
pie(pie.sales,
+     col = c("purple","violetred1","green3","cornsilk","cyan","white"))
title(main = "A Sample Color Wheel", cex.main = 1.4, font.main = 3)
title(xlab = "(Use this as a test of monitor linearity)",
+       cex.lab = 0.8, font.lab = 3)
## We have already confessed to having these.  This is just showing off X11
## color names (and the example (from the postscript manual) is pretty "cute".
pie.sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)
names(pie.sales) <- c("Blueberry", "Cherry",
+ 		      "Apple", "Boston Cream", "Other", "Vanilla Cream")
pie(pie.sales,
+     col = c("purple","violetred1","green3","cornsilk","cyan","white"))
demo(graph))
demo(graph)
source('~/Documents/ENSTA/SIM202/building-appliances/analyse.R', echo=TRUE)
cov<-head(names(Data0)[-c(1,2)],30)
selectByDate(
data,
start = "1/1/2016",
end = "01/02/2016",
year = 2016,
month = 1,
day = "weekday",
hour = 1
)
rm(list = objects())
setwd("/home/lokmen/Documents/ENSTA/SIM202/building-appliances/")   # set working directory
data <- read_delim("train.csv", col_names = TRUE, delim = ",")
library(readr)
data <- read_delim("train.csv", col_names = TRUE, delim = ",")
selectByDate(
data,
start = "1/1/2016",
end = "01/02/2016",
year = 2016,
month = 1,
day = "weekday",
hour = 1
)
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
s<-sample(data)
s
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
s<-sample(data,300)
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
s<-sample(data,30)
s
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
s<-sample(data)
s
data$Appliances
n<-length(data$Appliances)
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
source("R/rmse.R")
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
set.seed(100)
mysample <- data[sample(1:nrow(mydata), 50, replace=FALSE),]
mysample <- data[sample(1:nrow(data), 50, replace=FALSE),]
print(mysample)
mysample <- data[sample(1:nrow(data), 50, replace=T),]
print(mysample)
mysample <- data[sample(1:nrow(data), 50, replace=T),]
print(mysample)
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
set.seed(100)
rnom(123)
rnorm(123)
rnorm(13)
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
set.seed(100)
rnorm(13)
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
set.seed(100)
rnorm(13)
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
set.seed(100)
rnorm(13)
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
set.seed(100)
rnorm(13)
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
set.seed(100)
#rnorm(13)
mysample <- data[sample(1:nrow(data), 50, replace=T),]
print(mysample)
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
set.seed(100)
#rnorm(13)
mysample <- data[sample(1:nrow(data), 50, replace=T),]
print(mysample)
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
n<-length(data$Appliances)/3
n
set.seed(100)
#rnorm(13)
mysample <- data[sample(1:nrow(data), n, replace=T),]
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
n<-length(data$Appliances)/3
set.seed(100)
#rnorm(13)
mysample <- data[sample(1:nrow(data), n, replace=T),]
print(mysample)
set.seed(100)
#rnorm(13)
mysample <- data[sample(1:nrow(data), n, replace=T),]
print(mysample)
n
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
n<-length(data$Appliances)
n
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
n<-length(data$Appliances)/2
