V1(-1,3.2,-2,8)
V1=c(-1,3.2,-2,8)
V2=c(-2,-1,0,1,2,3,4,5,6)
V3=(0.05,0.1,0.15,0.2)
V3=c(0.05,0.1,0.15,0.2)
V4=c(1,1,1,1,1,1,1,1,1,1)
V5=c(OUI,NON)
V5=c('OUI'','NON'')
V5=c('OUI','NON')
V5
sort(V1)
V1
1+2
1+2.0
1.0+3.0
V2
V3
Vinty=c(1,1.0,2.0,2)
Vinty
V6=2*V1-3
V6
V6=2*V2-3
V6
V3+V2
cos(0)
log(1)
log(V1)
V5+1
log(V3)
V5(1)
V5[1]
V5[2]
length(6)
length(V6)
length(V1)
10:(-1)
seg(1,20,by=0,8)
seq(1,20,by=0,8)
seq(1,20,by=0.8)
seq(1,20,length=13)
V6[c(6,1,9)]
V6
V6[c(length(V6):)]
V6[c(length(V6)-3:)]
V6[c(length(V6)-3):]
c(length(V6)-3):
4
V1[1,4]
V1[1]
V6[c(length(V6)-2, c(length(V6)-1, c(length(V6)]
cumsum(V6)
V6
mean(V6)*length(V6)
sum(V6)
length(V2[V2>0])
?choose
n=10;p=0.2
k= 0:10     # ? compl?ter
pk= choose(n,k)*p^k*(1-p)^(n-k)
pk
k
mean(pk)
var(pk)
esperance_attendu = n*p
esperance_attendu
esperance = mean(pk)
esperance
var_attendu = n*p*(1-p)
var_obt = var(pk)
var_obt
var_attendu
Pk=cumsu(pk)
Pk=cumsum(pk)
Pk
df= data.frame(k,proba=pk)
print(df)
df$proba
df["proba"]
df[1:4,2]
df$proba[1:4]
max(df$proba)
summary(df)
attach(df) # acc?s direct aux colonnes, mais attention !!
detach(df)
?summary
?ppois
?pois
pwd
getwd()
setw(dir ="Dossier Personnel")
ls
N=3;
require(bbmle)
cauchy1(scale.arg = 1, llocation = "identitylink", ilocation = NULL,
imethod = 1, gprobs.y = ppoints(19), zero = NULL)
help
View(df)
V1=c(-1,3.2,-2,8)
V2=-2:6
V3=seq(0.05,0.2,0.05)
V4=rep(1,10)
V5=c("OUI","NON")
sort(V1)
# op?ration composante par composante et recyclage
V6=2*V2-3
V6=2*V2-3
V1=c(-1,3.2,-2,8)
V2=-2:6
V3=seq(0.05,0.2,0.05)
V4=rep(1,10)
V5=c("OUI","NON")
sort(V1)
# op?ration composante par composante et recyclage
V6=2*V2-3
V6
V3+V2
log(V3)
log(v6)
log(V6)
V5+1
V5[2]
V7=V6[length(V6)-3:length(V6)]
V7
v7=tail(V6,3) #plus simple !
v7
v7=V6[length(V6)-(2:0)]
v7=V6[length(V6)-(2:0)]
v7
rm(list=objects())
library(tidyverse)
library(lubridate)
library(ranger)
Data0 <- read.csv(file="Data/train.csv", sep=",", dec='.')
Data1 <- read.csv(file="Data/test.csv", sep=",", dec='.')
Data0 <- read.csv(file="train.csv", sep=",", dec='.')
rm(list=objects())
library(tidyverse)
library(lubridate)
library(ranger)
Data0 <- read.csv(file="train.csv", sep=",", dec='.')
install.packages("ranger")
rm(list=objects())
library(tidyverse)
library(lubridate)
library(ranger)
setwd("/home/lokmen/Documents/ENSTA/SIM202/building-appliances/")   # set working directory
Data0 <- read.csv(file="train.csv", sep=",", dec='.')
Data1 <- read.csv(file="test.csv", sep=",", dec='.')
cov <- head(names(Data0)[-c(1,2)], 32) ####un peu long (instantF)
cov <- head(names(Data0)[-c(1,2)], 30)
head(names(Data0)[-c(1,2)], 30)
Data0)
(Data0)
names(Data0)
names(Data0)[-c(1,2)]
names(Data0)
names(Data0)[-c(1,2)]
head(names(Data0)[-c(1,2)], 30)
cov
paste0(cov, collapse='+')
eq <- paste0("Appliances ~", paste0(cov, collapse='+'))
eq
full.model <- lm(eq, data = Data0[-s,])
s <- sample(c(1:n), size=floor(n*0.1))
n <- nrow(Data0)
s <- sample(c(1:n), size=floor(n*0.1))
full.model <- lm(eq, data = Data0[-s,])
lm(eq, data = Data0[-s,])
length(s)
s
lm(eq, data = Data0[-s,])
eq
head(names(Data0)[-c(1,2)], 30)
paste0("Appliances ~", paste0(cov[1], collapse='+'))
eq_list[[1]] <-  paste0("Appliances ~", paste0(cov[1], collapse='+'))
for(i in c(2:length(cov)))
quit
eq_list[[1]]
eq_list <- list()
eq_list[[1]] <-  paste0("Appliances ~", paste0(cov[1], collapse='+'))
eq_list[[1]]
for(i in c(2:length(cov)))
eq_list[[i]] <-  paste0("Appliances ~", paste0(cov[1:i], collapse='+'))
for(i in c(2:length(cov)))
{
eq_list[[i]] <-  paste0("Appliances ~", paste0(cov[1:i], collapse='+'))
eq_list[[i]]
}
size(eq_list)
length(eq_list)
nrow(eq_list)
ncol(eq_list)
str(eq_list)
fitMod <- function(eq, subset)
{
reg <- lm(eq, data=Data0[-subset,])
return(reg)
}
reg_list <- lapply(eq_list, fitMod, subset=s)
reg_list
cov <- head(names(Data0)[-c(1,2)], 30)
l="Appliances ~"
past0(l,char(T5),collapse="+")
past0(l,"T5",collapse="+")
paste0(l,"T5",collapse="+")
l<-paste0(l,"T5",collapse="+")
rm(l)
cov <- head(names(data)[-c(1,2)], 30)
n <- nrow(data)
set.seed(100)
s <- sample(c(1:n), size=floor(n*0.5))
n
n <- nrow(data)
cov <- head(names(data)[-c(1,2)], 30)
nrow(data)
#data <- read_delim("train.csv", col_names = TRUE, delim = ",")
#data_test<- read_delim("test.csv", col_names = TRUE, delim = ",")
data<-read.csv(file="train.csv", sep=",", dec='.')
rm(list = objects())
#data <- read_delim("train.csv", col_names = TRUE, delim = ",")
#data_test<- read_delim("test.csv", col_names = TRUE, delim = ",")
data<-read.csv(file="train.csv", sep=",", dec='.')
data_test<-read.csv(file="test.csv", sep=",", dec='.')
library(readr)
setwd("/home/lokmen/Documents/ENSTA/SIM202/building-appliances/")   # set working directory
cov <- head(names(data)[-c(1,2)], 30)
n <- nrow(data)
set.seed(100)
s <- sample(c(1:n), size=floor(n*0.5))
length(s)
eq=""
eq
l="Appliances ~"
eq_list<-l
eq_list <-  paste0(l, paste0(cov[1], collapse='+'))
eq_list
eq_list =list()
eq_list[[1] <-  paste0(l, paste0(cov[1], collapse='+'))
for(i in c(2:length(cov)))
{
eq_list[[i]] <-  paste0("Appliances ~", paste0(cov[1:i], collapse='+'))
eq_list[[i]]
}
#str(data)
#head(data)
summary(data)
attach(data)
cons =data$Appliances
plot(data$date, data$Appliances, type = 'l')
######################################
########## Histogram  ###########
######################################
#histogram avec 40 marches
hist(cons,breaks =40,main="Frequence des consomations",xlab="Quantités Consommées",
ylab="Frequence",col="green",proba=T)
h<-hist(cons,breaks =seq(min(cons),max(cons),by=10),plot =FALSE)
h$counts
#s = max(h$counts) ### Si on prend le max atteint en terme de repetition
#s=m(cons)   ### Si on prend l'occurence maximale.
m=min(cons)+which.max(h$counts)*10
# hist du min au max avec pas de 10
hist(cons,breaks =seq(min(cons),max(cons),by=10),main="Frequence des consomations",
xlab="Quantités Consommées", ylab="Frequence",col="green",proba=T)
#histo du min au max avec pas de 10 tronqué à 200
hist(cons,breaks =seq(min(cons),max(cons),by=10),main="Frequence des consomations",
xlab="Quantités Consommées", ylab="Frequence",col="green",proba=F,
xlim=c(0,200),ylim=c(0,3000))
curve(dnorm(x,mean=m,sd =s**(1/2)), add =T, col = "red")
curve(dnorm(x,mean=mean(cons),sd =sd(cons)), add =T, col = "red")
######################################
########## Corelation  ###########
######################################
library(corrplot)
round(cor(df),4) # MAtrice de correlation ie de(s) covariance(s)
corrplot(cor(df),method = "number",type="upper")
#pairs(~ x1 + x3, data = data, labels = c("var1", "var3"),
#         main = "This is a nice pairs plot in R")) #faire un scatterplot en enlevant la variable x2
#plot(data$date<"2016-02-01", data$T1-data$T2, type = 'h')
#plot(data$date, data$T1-data$T2, type = 'h')
#selectByDate(
data,
start = "1/1/2016",
end = "01/02/2016",
year = 2016,
month = 1,
day = "weekday",
hour = 1
)
# CONSTRUIR UN MODELE DE REGRESSION LINEAIRE
n<-length(data$Appliances)/2
set.seed(100)
#rnorm(13)
mysample <- data[sample(1:nrow(data), n, replace=T),]
print(mysample)
s<-sample(data)
s
cov<-head(names(data)[-c(1,2)],30)
eq_list[[1] <-  paste0(l, paste0(cov[1], collapse='+'))
eq_list[[1]] <-  paste0(l, paste0(cov[1], collapse='+'))
eq_list[[1]]
for(i in c(2:length(cov)))
{
eq_list[[i]] <-  paste0("Appliances ~", paste0(cov[[i]], collapse='+'))
eq_list[[i]]
}
eq_list
fitMod <- function(eq, subset)
{
reg <- lm(eq, data=data[-subset,])
return(reg)
}
reg_list <- lapply(eq_list, fitMod, subset=s)
lapply(eq_list, fitMod, subset=s)
?lapply
eq_list
firMod(eq_list,s)
fitMod(eq_list,s)
lm(eq_list,data=data[-s,])
rm(list = objects())
graphics.off()
setwd("/home/lokmen/Documents/ENSTA/SIM202/building-appliances/")   # set working directory
library(readr)
#data <- read_delim("train.csv", col_names = TRUE, delim = ",")
#data_test<- read_delim("test.csv", col_names = TRUE, delim = ",")
data0<-read.csv(file="train.csv", sep=",", dec='.')
data_test<-read.csv(file="test.csv", sep=",", dec='.')
cov <- head(names(data)[-c(1,2)], 30)
cov <- head(names(data0)[-c(1,2)], 30)
n <- nrow(data0)
set.seed(100)
s <- sample(c(1:n), size=floor(n*0.5))
length(s)
l="Appliances ~"
eq_list =list()
eq_list[[1]] <-  paste0(l, paste0(cov[1], collapse='+'))
for(i in c(2:length(cov)))
{
eq_list[[i]] <-  paste0("Appliances ~", paste0(cov[[i]], collapse='+'))
eq_list[[i]]
}
fitMod <- function(eq, subset)
{
reg <- lm(eq, data=data0[-subset,])
return(reg)
}
lm(eq_list,data=data0[-s,])
fitMod(eq_list,s)
reg_list <- lapply(eq_list, fitMod, subset=s)
reg_list_forecast <- lapply(reg_list, predict, newdata=data0[s,])
rmse_list <- lapply(reg_list_forecast, rmse, y=data0[s,]$Appliances)
source("R/rmse.R")
library(readr)
library(tidyverse)
library(lubridate)
library(ranger)
source("R/rmse.R")
source("rmse.R")
install.packages("model-quality")
source("rmse.R")
reg_list_forecast <- lapply(reg_list, predict, newdata=data0[s,])
rmse_list <- lapply(reg_list_forecast, rmse, y=data0[s,]$Appliances)
rmse(reg_list_forecast[[1]]),data0)
rmse(reg_list_forecast[[1]],data0)
rmse(reg_list_forecast[[1]],data0[s,]$Appliances)
rmse_list <- lapply(reg_list_forecast, rmse, y=data0[s,]$Appliances)
rmse_list <- lapply(reg_list_forecast,data0[s,]$Appliances, rmse, )
rmse_list <- lapply(reg_list_forecast,data0[s,]$Appliances, rmse)
